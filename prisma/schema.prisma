datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  emailVerified   DateTime?
  password        String
  isAdmin         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attempts        Attempt[]
  questionStatus  QuestionStatus[]
  examAttempts    ExamAttempt[]

  @@index([username])
  @@index([email])
}

model Question {
  id                Int                 @id @default(autoincrement())
  title             String     
  text              String
  difficulty        String // 'EASY', 'MEDIUM', 'HARD'
  subject           String
  explanation       String
  type              String // 'MULTIPLE_CHOICE_SINGLE', 'MULTIPLE_CHOICE_MULTIPLE', 'FILL_IN_THE_BLANK'
  correctPercentage Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  attempts          Attempt[]
  options           Option[]
  questionStatus    QuestionStatus[]

  @@index([difficulty])
  @@index([subject])
}

model QuestionStatus {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  status     String   @default("UNATTEMPTED") // 'UNATTEMPTED', 'ATTEMPTED', 'PARTIALLY_SOLVED', 'SOLVED'

  @@unique([userId, questionId])
}

model Attempt {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  question        Question        @relation(fields: [questionId], references: [id])
  questionId      Int
  textResponse    String?
  correctness     Float // 0 to 1, where 1 is fully correct
  selectedOptions AttemptOption[]
}

model Option {
  id         Int             @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  question   Question        @relation(fields: [questionId], references: [id])
  questionId Int
  attempts   AttemptOption[]
}

model AttemptOption {
  id        String  @id @default(cuid())
  attempt   Attempt @relation(fields: [attemptId], references: [id])
  attemptId String
  option    Option  @relation(fields: [optionId], references: [id])
  optionId  Int

  @@unique([attemptId, optionId])
}

model ExamPaper {
  id          String              @id @default(cuid())
  title       String
  description String?
  totalMarks  Float               @default(0) // Added default value
  duration    Int                 @default(60) // Added default value (60 minutes)
  questions   ExamPaperQuestion[]
  attempts    ExamAttempt[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model ExamPaperQuestion {
  id            String                    @id @default(cuid())
  title         String                    @default("Untitled Question")
  text          String                    @default("")
  subject       String                    @default("General")
  type          String                    @default("MULTIPLE_CHOICE_SINGLE")
  positiveMarks Float                     @default(1)
  negativeMarks Float                     @default(0)
  examPaper     ExamPaper                 @relation(fields: [examPaperId], references: [id])
  examPaperId   String
  order         Int
  examAnswers   ExamAnswer[]
  options       ExamPaperQuestionOption[]

  @@unique([examPaperId, order])
}

model ExamAnswer {
  id                  String             @id @default(cuid())
  examAttempt         ExamAttempt        @relation(fields: [examAttemptId], references: [id])
  examAttemptId       String
  examPaperQuestion   ExamPaperQuestion? @relation(fields: [examPaperQuestionId], references: [id])
  examPaperQuestionId String?
  questionId          Int?               // Keep this temporarily
  answer              String
  correctness         Float

  @@index([examPaperQuestionId])
}

model ExamPaperQuestionOption {
  id                  String            @id @default(cuid())
  text                String
  isCorrect           Boolean
  examPaperQuestion   ExamPaperQuestion @relation(fields: [examPaperQuestionId], references: [id])
  examPaperQuestionId String

  @@index([examPaperQuestionId])
}

model ExamAttempt {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  examPaper   ExamPaper   @relation(fields: [examPaperId], references: [id])
  examPaperId String
  score       Float
  startedAt   DateTime    @default(now())
  completedAt DateTime?
  answers     ExamAnswer[]
}
