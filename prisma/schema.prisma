datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String     @id @default(cuid())
  username        String     @unique
  email           String     @unique
  emailVerified   DateTime?
  accounts        Account[]
  sessions        Session[]
  password        String
  questionsSolved Int        @default(0)
  isAdmin         Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  solutions       Solution[]
  attempts        Attempt[]

  @@index([username])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id                Int        @id @default(autoincrement())
  text              String
  difficulty        String // 'EASY', 'MEDIUM', 'HARD'
  subject           String
  explanation       String
  type              String // 'MULTIPLE_CHOICE_SINGLE', 'MULTIPLE_CHOICE_MULTIPLE', 'FILL_IN_THE_BLANK'
  correctPercentage Float      @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  solutions         Solution[]
  attempts          Attempt[]
  options           Option[]

  @@index([difficulty])
  @@index([subject])
}

model Solution {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Attempt {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  question        Question        @relation(fields: [questionId], references: [id])
  questionId      Int
  textResponse    String?
  correctness     Float // 0 to 1, where 1 is fully correct
  selectedOptions AttemptOption[]
}

model Option {
  id         Int             @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  question   Question        @relation(fields: [questionId], references: [id])
  questionId Int
  attempts   AttemptOption[]
}

model AttemptOption {
  id        String  @id @default(cuid())
  attempt   Attempt @relation(fields: [attemptId], references: [id])
  attemptId String
  option    Option  @relation(fields: [optionId], references: [id])
  optionId  Int

  @@unique([attemptId, optionId])
}
